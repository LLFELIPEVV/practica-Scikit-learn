# üì¶ Importamos herramientas para trabajar con datos y gr√°ficos
import numpy as np  # Para c√°lculos matem√°ticos
import pandas as pd  # Para trabajar con tablas de datos (como Excel)
import matplotlib.pyplot as plt  # Para crear gr√°ficos y visualizaciones
import seaborn as sns  # Para hacer gr√°ficos m√°s bonitos y profesionales

# üõ†Ô∏è Importamos herramienta para ajustar escalas de los datos
from sklearn.preprocessing import StandardScaler, QuantileTransformer

# üé® Configuramos el estilo visual de todos los gr√°ficos
# Fondo claro y colores modernos
sns.set_theme(style="whitegrid", palette="viridis")

# üîÑ MEJORAMOS LOS DATOS PARA QUE EL MODELO ENTIENDA MEJOR:
# Escalar los datos ayuda a que el modelo funcione mejor y m√°s r√°pido
# (Como poner todas las medidas en la misma escala)

# üìÇ Cargamos nuestros datos desde un archivo CSV
df = pd.read_csv("drawndata1.csv")

# üëÄ Vistazo r√°pido a las primeras 3 filas de los datos
print("Primeras 3 filas de nuestros datos:")
df.head(3)
print("\nInformaci√≥n t√©cnica:")
df.info()  # Resumen de columnas y tipos de datos

# üéØ Separamos los datos en dos partes:
X = df[['x', 'y']].values  # Coordenadas X e Y (datos para predecir)
y = df['z'] == "a"  # Etiquetas: Verdadero/Falso seg√∫n la columna 'z'

# üìä Gr√°fico 1: Datos originales
plt.figure(figsize=(10, 6))  # Tama√±o del gr√°fico
sns.scatterplot(x=X[:, 0], y=X[:, 1], hue=y, palette={True: "#440154", False: "#fde725"},
                edgecolor="black", alpha=0.8, s=80)
plt.title(
    "Distribuci√≥n Original de los Datos\n(Colores muestran diferentes grupos)", pad=20)
plt.xlabel("Coordenada X", labelpad=10)
plt.ylabel("Coordenada Y", labelpad=10)
plt.legend(title="Grupo A", loc="upper right")
plt.show()

# üîß Ajustamos la escala de los datos
escalador = StandardScaler()  # Creamos un ajustador de escalas
X_new = escalador.fit_transform(X)  # Transformamos los datos

# üìä Gr√°fico 2: Datos escalados
plt.figure(figsize=(10, 6))
sc = sns.scatterplot(x=X_new[:, 0], y=X_new[:, 1], hue=y,
                     palette={True: "#21918c", False: "#fde725"},
                     edgecolor="black", alpha=0.8, s=80)
plt.title("Datos despu√©s del Escalado\n(Misma informaci√≥n en nueva escala)", pad=20)
plt.xlabel("Coordenada X (Escalada)", labelpad=10)
plt.ylabel("Coordenada Y (Escalada)", labelpad=10)
plt.legend(title="Grupo A", loc="upper right")
# L√≠neas de referencia para el punto (0,0) despu√©s del escalado
plt.axhline(0, color='gray', linestyle='--', linewidth=1)
plt.axvline(0, color='gray', linestyle='--', linewidth=1)
plt.show()

# üß™ Ejemplo adicional: C√≥mo funciona el escalado
# Generamos 1000 n√∫meros aleatorios combinando dos distribuciones
datos_aleatorios = np.random.exponential(
    10, 1000) + np.random.normal(0, 1, 1000)

# üîÑ Aplicamos escalado a nuestros datos aleatorios
datos_escalados = (datos_aleatorios - np.mean(datos_aleatorios)
                   ) / np.std(datos_aleatorios)

# üìä Gr√°fico 3: Histograma mejorado
plt.figure(figsize=(10, 6))
sns.histplot(datos_escalados, bins=30, kde=True, color="#440154",
             edgecolor="white", linewidth=1.2)
plt.title(
    "Distribuci√≥n de Datos Escalados\n(L√≠nea curva muestra la tendencia)", pad=20)
plt.xlabel("Valores Estandarizados (media = 0, desviaci√≥n = 1)", labelpad=10)
plt.ylabel("Cantidad de Datos", labelpad=10)
plt.grid(axis='y', alpha=0.3)
plt.show()

# üîÑ TRANSFORMACI√ìN DE DATOS CON M√âTODO CUANTILES
# Transformaci√≥n que ordena y divide los datos en grupos iguales para mejor distribuci√≥n
# M√©todo especial para manejar valores extremos y distribuciones irregulares

# üìè APLICAMOS LA TRANSFORMACI√ìN CON 100 NIVELES DE PRECISI√ìN
# Usamos 100 divisiones para mayor precisi√≥n (como reglas de medici√≥n m√°s finas)
X_new = QuantileTransformer(n_quantiles=100).fit_transform(X)

# üìä CREAMOS UN GR√ÅFICO PROFESIONAL PARA ENTENDER LOS RESULTADOS
# Tama√±o ideal para gr√°ficos claros (10 pulgadas de ancho x 6 de alto)
plt.figure(figsize=(10, 6))

# üé® DISE√ëAMOS EL GR√ÅFICO DE PUNTOS MEJORADO
scatter = sns.scatterplot(
    x=X_new[:, 0],  # Valores transformados en el eje horizontal
    y=X_new[:, 1],  # Valores transformados en el eje vertical
    hue=y,  # Colorear puntos seg√∫n pertenezcan al Grupo A (S√≠/No)
    # Azul para el Grupo A, Amarillo para otros
    palette={True: "#2D708E", False: "#FDE725"},
    edgecolor="black",  # Borde negro para diferenciar puntos superpuestos
    alpha=0.8,  # Transparencia para ver densidad de puntos
    s=80  # Tama√±o ideal para visualizaci√≥n clara
)

# üîç PERSONALIZAMOS LA INFORMACI√ìN DEL GR√ÅFICO
# T√≠tulo descriptivo en dos l√≠neas
plt.title(
    "Datos Reorganizados con M√©todo Cuantiles\n(Mayor precisi√≥n en an√°lisis)", pad=20)
# Etiqueta eje horizontal con espacio adicional
plt.xlabel("Posici√≥n X Transformada", labelpad=10)
# Etiqueta eje vertical con espacio adicional
plt.ylabel("Posici√≥n Y Transformada", labelpad=10)
plt.legend(title="¬øPertenece al Grupo A?", loc="upper right",
           labels=['No', 'S√≠'])  # Cuadro explicativo de colores

# ‚ûï L√çNEAS GU√çA PARA MEJOR ORIENTACI√ìN
# L√≠nea horizontal central de referencia
plt.axhline(0, color='gray', linestyle='--', linewidth=1)
# L√≠nea vertical central de referencia
plt.axvline(0, color='gray', linestyle='--', linewidth=1)

# üü¶ CUADR√çCULA ESTILIZADA PARA FACILITAR LA LECTURA
plt.grid(alpha=0.3, linestyle=':')  # L√≠neas punteadas suaves como gu√≠a visual

plt.show()  # Mostrar el gr√°fico final
